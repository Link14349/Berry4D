void rotationMatrix(float tx, float ty, float tz, float tw, float A[4][4]) {
    float sx = sin(tx), sy = sin(ty), sz = sin(tz), sw = sin(tw);
    float cx = cos(tx), cy = cos(ty), cz = cos(tz), cw = cos(tw);
    float sxsy = sx * sy;
    float cxcy = cx * cy;
    float cxsy = cx * sy;
    float TMP1 = (((cy)) * (cz) + ((sy)) * (sz));
    float TMP2 = (((cy)) * (-sz) + ((sy)) * (-sz));
    float TMP12 = ((sx)) * (sz);
    float TMP13 = ((sx)) * (cz);
    float TMP3 = TMP12 + (sxsy + cxcy) * (sz);
    float TMP4 = TMP13 + (sxsy + cxcy) * (-sz);
    float TMP5 = (-sx) * (cy) + (-sxsy);
    float TMP6 = 2 * sxsy;
    float TMP7 = (-cxsy) + (-sxsy);
    float TMP8 = ((-cxsy) + (sx) * (cy));
    float TMP9 = sxsy + (-cxsy);
    float TMP10 = (sxsy + (-sx) * (cy));
    float TMP11 = ((cx)) * (cz);
    float TMP14 = TMP8 * (sz);
    float TMP15 = (cxcy + sxsy);
    float TMP16 = (((-sx) * (cy) + cxsy));
    A[0][0] = TMP1 * (cw) + TMP2 * (sw) - (((sy))) * (sw);
    A[0][1] = TMP1 * (-sw) + TMP2 * (cw) + (((sy))) * (sw);
    A[0][2] = TMP1 * (sw) + TMP2 * (-sw) + (((sy))) * (cw);
    A[0][3] = (((cy)) * (-sz) + ((sy)) * (cz));
    A[1][0] = ((TMP6) * (cz) + ((cx)) * (sz) + TMP10 * (sz)) * (cw) +
              ((TMP6) * (-sz) + TMP11 + (sxsy + (sx) * (cy)) * (sz)) * (sw) +
              ((TMP5)) * (-sw);
    A[1][1] = ((TMP6) * (cz) + ((cx)) * (sz) + TMP10 * (sz)) * (-sw) +
              ((TMP6) * (-sz) + TMP11 + TMP10 * (-sz)) * (cw) +
              ((TMP5)) * (sw);
    A[1][2] = ((TMP6) * (cz) + ((cx)) * (sz) + TMP10 * (sz)) * (sw) +
              ((TMP6) * (-sz) + TMP11 + TMP10 * (-sz)) * (-sw) +
              ((TMP5)) * (cw);
    A[1][3] = ((TMP6) * (-sz) + ((cx)) * (sz) + TMP10 * (cz));
    A[2][0] = ((TMP7) * (cz) + TMP12 + TMP14) * (cw) +
              ((TMP7) * (-sz) + TMP13 + TMP8 * (-sz)) * (sw) +
              (TMP15) * (-sw);
    A[2][1] = ((TMP7) * (cz) + TMP12 + TMP14) * (-sw) +
              ((TMP7) * (-sz) + TMP13 - TMP14) * (cw) +
              (TMP15) * (sw);
    A[2][2] = ((TMP7) * (cz) + TMP12 + TMP14) * (sw) +
              ((TMP7) * (-sz) + TMP13 - TMP14) * (-sw) +
              (TMP15) * (cw);
    A[2][3] = ((TMP7) * (-sz) + TMP12 + TMP8 * (cz));
    A[3][0] = ((TMP9) * (cz) + TMP3) * (cw) +
              ((TMP9) * (-sz) + TMP4) * (sw) +
              TMP16 * (-sw);
    A[3][1] = ((TMP9) * (cz) + TMP3) * (-sw) +
              ((TMP9) * (-sz) + TMP4) * (cw) +
              TMP16 * (sw);
    A[3][2] = ((TMP9) * (cz) + TMP3) * (sw) +
              ((TMP9) * (-sz) + TMP4) * (-sw) +
              TMP16 * (cw);
    A[3][3] = ((TMP9) * (-sz) + TMP12 + (sxsy + cxcy) * (cz));
}
